/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 15 08:53:01 GMT 2019
 */

package triangle;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import triangle.Triangle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triangle_ESTest extends Triangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(1000, 4229, 1000);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(1, 1, 1184);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(3, 1, 2);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(1, 4, 3);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(1, 2, 3);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(469, 895, 0);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(895, 0, 1);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify((-1), 4058, 0);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(2842, 17, 17);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(17, 383, 383);
      assertEquals(Triangle.Type.ISOSCELES, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(2, 4, 2);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(1649, 1649, 1);
      assertEquals(Triangle.Type.ISOSCELES, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(979, 17, 383);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(2, 1017, 280);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(17, 979, 2842);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(1017, 1017, 1017);
      assertEquals(Triangle.Type.EQUILATERAL, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(3, 4, 3);
      assertEquals(Triangle.Type.ISOSCELES, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(2, 2, 4);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(979, 979, (-1455));
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(4, (-3037), 4);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(1754, 1294, 882);
      assertEquals(Triangle.Type.SCALENE, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Triangle.Type triangle_Type0 = Triangle.classify(0, 1754, 0);
      assertEquals(Triangle.Type.INVALID, triangle_Type0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Triangle triangle0 = new Triangle();
  }
}
